// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1alpha1a "github.com/knative/serving/pkg/apis/autoscaling/v1alpha1"
	v1alpha1 "github.com/rancher/wrangler-api/pkg/generated/controllers/autoscaling.internal.knative.dev/v1alpha1"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockPodAutoscalerControllerMockAddGenericHandler       sync.RWMutex
	lockPodAutoscalerControllerMockAddGenericRemoveHandler sync.RWMutex
	lockPodAutoscalerControllerMockCache                   sync.RWMutex
	lockPodAutoscalerControllerMockCreate                  sync.RWMutex
	lockPodAutoscalerControllerMockDelete                  sync.RWMutex
	lockPodAutoscalerControllerMockEnqueue                 sync.RWMutex
	lockPodAutoscalerControllerMockGet                     sync.RWMutex
	lockPodAutoscalerControllerMockGroupVersionKind        sync.RWMutex
	lockPodAutoscalerControllerMockInformer                sync.RWMutex
	lockPodAutoscalerControllerMockList                    sync.RWMutex
	lockPodAutoscalerControllerMockOnChange                sync.RWMutex
	lockPodAutoscalerControllerMockOnRemove                sync.RWMutex
	lockPodAutoscalerControllerMockPatch                   sync.RWMutex
	lockPodAutoscalerControllerMockUpdate                  sync.RWMutex
	lockPodAutoscalerControllerMockUpdateStatus            sync.RWMutex
	lockPodAutoscalerControllerMockUpdater                 sync.RWMutex
	lockPodAutoscalerControllerMockWatch                   sync.RWMutex
)

// Ensure, that PodAutoscalerControllerMock does implement PodAutoscalerController.
// If this is not the case, regenerate this file with moq.
var _ v1alpha1.PodAutoscalerController = &PodAutoscalerControllerMock{}

// PodAutoscalerControllerMock is a mock implementation of PodAutoscalerController.
//
//     func TestSomethingThatUsesPodAutoscalerController(t *testing.T) {
//
//         // make and configure a mocked PodAutoscalerController
//         mockedPodAutoscalerController := &PodAutoscalerControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1alpha1.PodAutoscalerCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1alpha1a.PodAutoscaler) (*v1alpha1a.PodAutoscaler, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(namespace string, name string, options v1.GetOptions) (*v1alpha1a.PodAutoscaler, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(namespace string, opts v1.ListOptions) (*v1alpha1a.PodAutoscalerList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1alpha1.PodAutoscalerHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1alpha1.PodAutoscalerHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.PodAutoscaler, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1alpha1a.PodAutoscaler) (*v1alpha1a.PodAutoscaler, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1alpha1a.PodAutoscaler) (*v1alpha1a.PodAutoscaler, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(namespace string, opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedPodAutoscalerController in code that requires PodAutoscalerController
//         // and then make assertions.
//
//     }
type PodAutoscalerControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1alpha1.PodAutoscalerCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1alpha1a.PodAutoscaler) (*v1alpha1a.PodAutoscaler, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1.GetOptions) (*v1alpha1a.PodAutoscaler, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1.ListOptions) (*v1alpha1a.PodAutoscalerList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1alpha1.PodAutoscalerHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1alpha1.PodAutoscalerHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.PodAutoscaler, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1alpha1a.PodAutoscaler) (*v1alpha1a.PodAutoscaler, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1alpha1a.PodAutoscaler) (*v1alpha1a.PodAutoscaler, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.PodAutoscaler
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1alpha1.PodAutoscalerHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1alpha1.PodAutoscalerHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.PodAutoscaler
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.PodAutoscaler
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *PodAutoscalerControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("PodAutoscalerControllerMock.AddGenericHandlerFunc: method is nil but PodAutoscalerController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockPodAutoscalerControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockPodAutoscalerControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedPodAutoscalerController.AddGenericHandlerCalls())
func (mock *PodAutoscalerControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockPodAutoscalerControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockPodAutoscalerControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *PodAutoscalerControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("PodAutoscalerControllerMock.AddGenericRemoveHandlerFunc: method is nil but PodAutoscalerController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockPodAutoscalerControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockPodAutoscalerControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedPodAutoscalerController.AddGenericRemoveHandlerCalls())
func (mock *PodAutoscalerControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockPodAutoscalerControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockPodAutoscalerControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *PodAutoscalerControllerMock) Cache() v1alpha1.PodAutoscalerCache {
	if mock.CacheFunc == nil {
		panic("PodAutoscalerControllerMock.CacheFunc: method is nil but PodAutoscalerController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockPodAutoscalerControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockPodAutoscalerControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedPodAutoscalerController.CacheCalls())
func (mock *PodAutoscalerControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockPodAutoscalerControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockPodAutoscalerControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *PodAutoscalerControllerMock) Create(in1 *v1alpha1a.PodAutoscaler) (*v1alpha1a.PodAutoscaler, error) {
	if mock.CreateFunc == nil {
		panic("PodAutoscalerControllerMock.CreateFunc: method is nil but PodAutoscalerController.Create was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.PodAutoscaler
	}{
		In1: in1,
	}
	lockPodAutoscalerControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockPodAutoscalerControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedPodAutoscalerController.CreateCalls())
func (mock *PodAutoscalerControllerMock) CreateCalls() []struct {
	In1 *v1alpha1a.PodAutoscaler
} {
	var calls []struct {
		In1 *v1alpha1a.PodAutoscaler
	}
	lockPodAutoscalerControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockPodAutoscalerControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *PodAutoscalerControllerMock) Delete(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("PodAutoscalerControllerMock.DeleteFunc: method is nil but PodAutoscalerController.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockPodAutoscalerControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockPodAutoscalerControllerMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedPodAutoscalerController.DeleteCalls())
func (mock *PodAutoscalerControllerMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockPodAutoscalerControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockPodAutoscalerControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *PodAutoscalerControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("PodAutoscalerControllerMock.EnqueueFunc: method is nil but PodAutoscalerController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockPodAutoscalerControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockPodAutoscalerControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedPodAutoscalerController.EnqueueCalls())
func (mock *PodAutoscalerControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockPodAutoscalerControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockPodAutoscalerControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *PodAutoscalerControllerMock) Get(namespace string, name string, options v1.GetOptions) (*v1alpha1a.PodAutoscaler, error) {
	if mock.GetFunc == nil {
		panic("PodAutoscalerControllerMock.GetFunc: method is nil but PodAutoscalerController.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockPodAutoscalerControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockPodAutoscalerControllerMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedPodAutoscalerController.GetCalls())
func (mock *PodAutoscalerControllerMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}
	lockPodAutoscalerControllerMockGet.RLock()
	calls = mock.calls.Get
	lockPodAutoscalerControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *PodAutoscalerControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("PodAutoscalerControllerMock.GroupVersionKindFunc: method is nil but PodAutoscalerController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockPodAutoscalerControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockPodAutoscalerControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedPodAutoscalerController.GroupVersionKindCalls())
func (mock *PodAutoscalerControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockPodAutoscalerControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockPodAutoscalerControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *PodAutoscalerControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("PodAutoscalerControllerMock.InformerFunc: method is nil but PodAutoscalerController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockPodAutoscalerControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockPodAutoscalerControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedPodAutoscalerController.InformerCalls())
func (mock *PodAutoscalerControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockPodAutoscalerControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockPodAutoscalerControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *PodAutoscalerControllerMock) List(namespace string, opts v1.ListOptions) (*v1alpha1a.PodAutoscalerList, error) {
	if mock.ListFunc == nil {
		panic("PodAutoscalerControllerMock.ListFunc: method is nil but PodAutoscalerController.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockPodAutoscalerControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockPodAutoscalerControllerMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedPodAutoscalerController.ListCalls())
func (mock *PodAutoscalerControllerMock) ListCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockPodAutoscalerControllerMockList.RLock()
	calls = mock.calls.List
	lockPodAutoscalerControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *PodAutoscalerControllerMock) OnChange(ctx context.Context, name string, sync v1alpha1.PodAutoscalerHandler) {
	if mock.OnChangeFunc == nil {
		panic("PodAutoscalerControllerMock.OnChangeFunc: method is nil but PodAutoscalerController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1alpha1.PodAutoscalerHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockPodAutoscalerControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockPodAutoscalerControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedPodAutoscalerController.OnChangeCalls())
func (mock *PodAutoscalerControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1alpha1.PodAutoscalerHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1alpha1.PodAutoscalerHandler
	}
	lockPodAutoscalerControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockPodAutoscalerControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *PodAutoscalerControllerMock) OnRemove(ctx context.Context, name string, sync v1alpha1.PodAutoscalerHandler) {
	if mock.OnRemoveFunc == nil {
		panic("PodAutoscalerControllerMock.OnRemoveFunc: method is nil but PodAutoscalerController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1alpha1.PodAutoscalerHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockPodAutoscalerControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockPodAutoscalerControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedPodAutoscalerController.OnRemoveCalls())
func (mock *PodAutoscalerControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1alpha1.PodAutoscalerHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1alpha1.PodAutoscalerHandler
	}
	lockPodAutoscalerControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockPodAutoscalerControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *PodAutoscalerControllerMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.PodAutoscaler, error) {
	if mock.PatchFunc == nil {
		panic("PodAutoscalerControllerMock.PatchFunc: method is nil but PodAutoscalerController.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockPodAutoscalerControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockPodAutoscalerControllerMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedPodAutoscalerController.PatchCalls())
func (mock *PodAutoscalerControllerMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockPodAutoscalerControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockPodAutoscalerControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *PodAutoscalerControllerMock) Update(in1 *v1alpha1a.PodAutoscaler) (*v1alpha1a.PodAutoscaler, error) {
	if mock.UpdateFunc == nil {
		panic("PodAutoscalerControllerMock.UpdateFunc: method is nil but PodAutoscalerController.Update was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.PodAutoscaler
	}{
		In1: in1,
	}
	lockPodAutoscalerControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockPodAutoscalerControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedPodAutoscalerController.UpdateCalls())
func (mock *PodAutoscalerControllerMock) UpdateCalls() []struct {
	In1 *v1alpha1a.PodAutoscaler
} {
	var calls []struct {
		In1 *v1alpha1a.PodAutoscaler
	}
	lockPodAutoscalerControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockPodAutoscalerControllerMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *PodAutoscalerControllerMock) UpdateStatus(in1 *v1alpha1a.PodAutoscaler) (*v1alpha1a.PodAutoscaler, error) {
	if mock.UpdateStatusFunc == nil {
		panic("PodAutoscalerControllerMock.UpdateStatusFunc: method is nil but PodAutoscalerController.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.PodAutoscaler
	}{
		In1: in1,
	}
	lockPodAutoscalerControllerMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockPodAutoscalerControllerMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedPodAutoscalerController.UpdateStatusCalls())
func (mock *PodAutoscalerControllerMock) UpdateStatusCalls() []struct {
	In1 *v1alpha1a.PodAutoscaler
} {
	var calls []struct {
		In1 *v1alpha1a.PodAutoscaler
	}
	lockPodAutoscalerControllerMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockPodAutoscalerControllerMockUpdateStatus.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *PodAutoscalerControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("PodAutoscalerControllerMock.UpdaterFunc: method is nil but PodAutoscalerController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockPodAutoscalerControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockPodAutoscalerControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedPodAutoscalerController.UpdaterCalls())
func (mock *PodAutoscalerControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockPodAutoscalerControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockPodAutoscalerControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *PodAutoscalerControllerMock) Watch(namespace string, opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("PodAutoscalerControllerMock.WatchFunc: method is nil but PodAutoscalerController.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockPodAutoscalerControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockPodAutoscalerControllerMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedPodAutoscalerController.WatchCalls())
func (mock *PodAutoscalerControllerMock) WatchCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockPodAutoscalerControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockPodAutoscalerControllerMockWatch.RUnlock()
	return calls
}

var (
	lockPodAutoscalerClientMockCreate       sync.RWMutex
	lockPodAutoscalerClientMockDelete       sync.RWMutex
	lockPodAutoscalerClientMockGet          sync.RWMutex
	lockPodAutoscalerClientMockList         sync.RWMutex
	lockPodAutoscalerClientMockPatch        sync.RWMutex
	lockPodAutoscalerClientMockUpdate       sync.RWMutex
	lockPodAutoscalerClientMockUpdateStatus sync.RWMutex
	lockPodAutoscalerClientMockWatch        sync.RWMutex
)

// Ensure, that PodAutoscalerClientMock does implement PodAutoscalerClient.
// If this is not the case, regenerate this file with moq.
var _ v1alpha1.PodAutoscalerClient = &PodAutoscalerClientMock{}

// PodAutoscalerClientMock is a mock implementation of PodAutoscalerClient.
//
//     func TestSomethingThatUsesPodAutoscalerClient(t *testing.T) {
//
//         // make and configure a mocked PodAutoscalerClient
//         mockedPodAutoscalerClient := &PodAutoscalerClientMock{
//             CreateFunc: func(in1 *v1alpha1a.PodAutoscaler) (*v1alpha1a.PodAutoscaler, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(namespace string, name string, options v1.GetOptions) (*v1alpha1a.PodAutoscaler, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, opts v1.ListOptions) (*v1alpha1a.PodAutoscalerList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.PodAutoscaler, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1alpha1a.PodAutoscaler) (*v1alpha1a.PodAutoscaler, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1alpha1a.PodAutoscaler) (*v1alpha1a.PodAutoscaler, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             WatchFunc: func(namespace string, opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedPodAutoscalerClient in code that requires PodAutoscalerClient
//         // and then make assertions.
//
//     }
type PodAutoscalerClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1alpha1a.PodAutoscaler) (*v1alpha1a.PodAutoscaler, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1.GetOptions) (*v1alpha1a.PodAutoscaler, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1.ListOptions) (*v1alpha1a.PodAutoscalerList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.PodAutoscaler, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1alpha1a.PodAutoscaler) (*v1alpha1a.PodAutoscaler, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1alpha1a.PodAutoscaler) (*v1alpha1a.PodAutoscaler, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.PodAutoscaler
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.PodAutoscaler
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.PodAutoscaler
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *PodAutoscalerClientMock) Create(in1 *v1alpha1a.PodAutoscaler) (*v1alpha1a.PodAutoscaler, error) {
	if mock.CreateFunc == nil {
		panic("PodAutoscalerClientMock.CreateFunc: method is nil but PodAutoscalerClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.PodAutoscaler
	}{
		In1: in1,
	}
	lockPodAutoscalerClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockPodAutoscalerClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedPodAutoscalerClient.CreateCalls())
func (mock *PodAutoscalerClientMock) CreateCalls() []struct {
	In1 *v1alpha1a.PodAutoscaler
} {
	var calls []struct {
		In1 *v1alpha1a.PodAutoscaler
	}
	lockPodAutoscalerClientMockCreate.RLock()
	calls = mock.calls.Create
	lockPodAutoscalerClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *PodAutoscalerClientMock) Delete(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("PodAutoscalerClientMock.DeleteFunc: method is nil but PodAutoscalerClient.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockPodAutoscalerClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockPodAutoscalerClientMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedPodAutoscalerClient.DeleteCalls())
func (mock *PodAutoscalerClientMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockPodAutoscalerClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockPodAutoscalerClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *PodAutoscalerClientMock) Get(namespace string, name string, options v1.GetOptions) (*v1alpha1a.PodAutoscaler, error) {
	if mock.GetFunc == nil {
		panic("PodAutoscalerClientMock.GetFunc: method is nil but PodAutoscalerClient.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockPodAutoscalerClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockPodAutoscalerClientMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedPodAutoscalerClient.GetCalls())
func (mock *PodAutoscalerClientMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}
	lockPodAutoscalerClientMockGet.RLock()
	calls = mock.calls.Get
	lockPodAutoscalerClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *PodAutoscalerClientMock) List(namespace string, opts v1.ListOptions) (*v1alpha1a.PodAutoscalerList, error) {
	if mock.ListFunc == nil {
		panic("PodAutoscalerClientMock.ListFunc: method is nil but PodAutoscalerClient.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockPodAutoscalerClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockPodAutoscalerClientMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedPodAutoscalerClient.ListCalls())
func (mock *PodAutoscalerClientMock) ListCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockPodAutoscalerClientMockList.RLock()
	calls = mock.calls.List
	lockPodAutoscalerClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *PodAutoscalerClientMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.PodAutoscaler, error) {
	if mock.PatchFunc == nil {
		panic("PodAutoscalerClientMock.PatchFunc: method is nil but PodAutoscalerClient.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockPodAutoscalerClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockPodAutoscalerClientMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedPodAutoscalerClient.PatchCalls())
func (mock *PodAutoscalerClientMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockPodAutoscalerClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockPodAutoscalerClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *PodAutoscalerClientMock) Update(in1 *v1alpha1a.PodAutoscaler) (*v1alpha1a.PodAutoscaler, error) {
	if mock.UpdateFunc == nil {
		panic("PodAutoscalerClientMock.UpdateFunc: method is nil but PodAutoscalerClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.PodAutoscaler
	}{
		In1: in1,
	}
	lockPodAutoscalerClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockPodAutoscalerClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedPodAutoscalerClient.UpdateCalls())
func (mock *PodAutoscalerClientMock) UpdateCalls() []struct {
	In1 *v1alpha1a.PodAutoscaler
} {
	var calls []struct {
		In1 *v1alpha1a.PodAutoscaler
	}
	lockPodAutoscalerClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockPodAutoscalerClientMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *PodAutoscalerClientMock) UpdateStatus(in1 *v1alpha1a.PodAutoscaler) (*v1alpha1a.PodAutoscaler, error) {
	if mock.UpdateStatusFunc == nil {
		panic("PodAutoscalerClientMock.UpdateStatusFunc: method is nil but PodAutoscalerClient.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.PodAutoscaler
	}{
		In1: in1,
	}
	lockPodAutoscalerClientMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockPodAutoscalerClientMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedPodAutoscalerClient.UpdateStatusCalls())
func (mock *PodAutoscalerClientMock) UpdateStatusCalls() []struct {
	In1 *v1alpha1a.PodAutoscaler
} {
	var calls []struct {
		In1 *v1alpha1a.PodAutoscaler
	}
	lockPodAutoscalerClientMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockPodAutoscalerClientMockUpdateStatus.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *PodAutoscalerClientMock) Watch(namespace string, opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("PodAutoscalerClientMock.WatchFunc: method is nil but PodAutoscalerClient.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockPodAutoscalerClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockPodAutoscalerClientMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedPodAutoscalerClient.WatchCalls())
func (mock *PodAutoscalerClientMock) WatchCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockPodAutoscalerClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockPodAutoscalerClientMockWatch.RUnlock()
	return calls
}

var (
	lockPodAutoscalerCacheMockAddIndexer sync.RWMutex
	lockPodAutoscalerCacheMockGet        sync.RWMutex
	lockPodAutoscalerCacheMockGetByIndex sync.RWMutex
	lockPodAutoscalerCacheMockList       sync.RWMutex
)

// Ensure, that PodAutoscalerCacheMock does implement PodAutoscalerCache.
// If this is not the case, regenerate this file with moq.
var _ v1alpha1.PodAutoscalerCache = &PodAutoscalerCacheMock{}

// PodAutoscalerCacheMock is a mock implementation of PodAutoscalerCache.
//
//     func TestSomethingThatUsesPodAutoscalerCache(t *testing.T) {
//
//         // make and configure a mocked PodAutoscalerCache
//         mockedPodAutoscalerCache := &PodAutoscalerCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1alpha1.PodAutoscalerIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(namespace string, name string) (*v1alpha1a.PodAutoscaler, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1alpha1a.PodAutoscaler, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1alpha1a.PodAutoscaler, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedPodAutoscalerCache in code that requires PodAutoscalerCache
//         // and then make assertions.
//
//     }
type PodAutoscalerCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1alpha1.PodAutoscalerIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1alpha1a.PodAutoscaler, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1alpha1a.PodAutoscaler, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1alpha1a.PodAutoscaler, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1alpha1.PodAutoscalerIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *PodAutoscalerCacheMock) AddIndexer(indexName string, indexer v1alpha1.PodAutoscalerIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("PodAutoscalerCacheMock.AddIndexerFunc: method is nil but PodAutoscalerCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1alpha1.PodAutoscalerIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockPodAutoscalerCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockPodAutoscalerCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedPodAutoscalerCache.AddIndexerCalls())
func (mock *PodAutoscalerCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1alpha1.PodAutoscalerIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1alpha1.PodAutoscalerIndexer
	}
	lockPodAutoscalerCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockPodAutoscalerCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *PodAutoscalerCacheMock) Get(namespace string, name string) (*v1alpha1a.PodAutoscaler, error) {
	if mock.GetFunc == nil {
		panic("PodAutoscalerCacheMock.GetFunc: method is nil but PodAutoscalerCache.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockPodAutoscalerCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockPodAutoscalerCacheMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedPodAutoscalerCache.GetCalls())
func (mock *PodAutoscalerCacheMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockPodAutoscalerCacheMockGet.RLock()
	calls = mock.calls.Get
	lockPodAutoscalerCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *PodAutoscalerCacheMock) GetByIndex(indexName string, key string) ([]*v1alpha1a.PodAutoscaler, error) {
	if mock.GetByIndexFunc == nil {
		panic("PodAutoscalerCacheMock.GetByIndexFunc: method is nil but PodAutoscalerCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockPodAutoscalerCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockPodAutoscalerCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedPodAutoscalerCache.GetByIndexCalls())
func (mock *PodAutoscalerCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockPodAutoscalerCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockPodAutoscalerCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *PodAutoscalerCacheMock) List(namespace string, selector labels.Selector) ([]*v1alpha1a.PodAutoscaler, error) {
	if mock.ListFunc == nil {
		panic("PodAutoscalerCacheMock.ListFunc: method is nil but PodAutoscalerCache.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockPodAutoscalerCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockPodAutoscalerCacheMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedPodAutoscalerCache.ListCalls())
func (mock *PodAutoscalerCacheMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockPodAutoscalerCacheMockList.RLock()
	calls = mock.calls.List
	lockPodAutoscalerCacheMockList.RUnlock()
	return calls
}
