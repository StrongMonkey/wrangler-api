/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1alpha1 "github.com/knative/serving/pkg/apis/autoscaling/v1alpha1"
	clientset "github.com/knative/serving/pkg/client/clientset/versioned/typed/autoscaling/v1alpha1"
	informers "github.com/knative/serving/pkg/client/informers/externalversions/autoscaling/v1alpha1"
	listers "github.com/knative/serving/pkg/client/listers/autoscaling/v1alpha1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type PodAutoscalerHandler func(string, *v1alpha1.PodAutoscaler) (*v1alpha1.PodAutoscaler, error)

type PodAutoscalerController interface {
	generic.ControllerMeta
	PodAutoscalerClient

	OnChange(ctx context.Context, name string, sync PodAutoscalerHandler)
	OnRemove(ctx context.Context, name string, sync PodAutoscalerHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() PodAutoscalerCache
}

type PodAutoscalerClient interface {
	Create(*v1alpha1.PodAutoscaler) (*v1alpha1.PodAutoscaler, error)
	Update(*v1alpha1.PodAutoscaler) (*v1alpha1.PodAutoscaler, error)
	UpdateStatus(*v1alpha1.PodAutoscaler) (*v1alpha1.PodAutoscaler, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.PodAutoscaler, error)
	List(namespace string, opts metav1.ListOptions) (*v1alpha1.PodAutoscalerList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.PodAutoscaler, err error)
}

type PodAutoscalerCache interface {
	Get(namespace, name string) (*v1alpha1.PodAutoscaler, error)
	List(namespace string, selector labels.Selector) ([]*v1alpha1.PodAutoscaler, error)

	AddIndexer(indexName string, indexer PodAutoscalerIndexer)
	GetByIndex(indexName, key string) ([]*v1alpha1.PodAutoscaler, error)
}

type PodAutoscalerIndexer func(obj *v1alpha1.PodAutoscaler) ([]string, error)

type podAutoscalerController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.PodAutoscalersGetter
	informer          informers.PodAutoscalerInformer
	gvk               schema.GroupVersionKind
}

func NewPodAutoscalerController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.PodAutoscalersGetter, informer informers.PodAutoscalerInformer) PodAutoscalerController {
	return &podAutoscalerController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromPodAutoscalerHandlerToHandler(sync PodAutoscalerHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1alpha1.PodAutoscaler
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1alpha1.PodAutoscaler))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *podAutoscalerController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1alpha1.PodAutoscaler))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdatePodAutoscalerDeepCopyOnChange(client PodAutoscalerClient, obj *v1alpha1.PodAutoscaler, handler func(obj *v1alpha1.PodAutoscaler) (*v1alpha1.PodAutoscaler, error)) (*v1alpha1.PodAutoscaler, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *podAutoscalerController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *podAutoscalerController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *podAutoscalerController) OnChange(ctx context.Context, name string, sync PodAutoscalerHandler) {
	c.AddGenericHandler(ctx, name, FromPodAutoscalerHandlerToHandler(sync))
}

func (c *podAutoscalerController) OnRemove(ctx context.Context, name string, sync PodAutoscalerHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromPodAutoscalerHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *podAutoscalerController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), namespace, name)
}

func (c *podAutoscalerController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), namespace, name, duration)
}

func (c *podAutoscalerController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *podAutoscalerController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *podAutoscalerController) Cache() PodAutoscalerCache {
	return &podAutoscalerCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *podAutoscalerController) Create(obj *v1alpha1.PodAutoscaler) (*v1alpha1.PodAutoscaler, error) {
	return c.clientGetter.PodAutoscalers(obj.Namespace).Create(obj)
}

func (c *podAutoscalerController) Update(obj *v1alpha1.PodAutoscaler) (*v1alpha1.PodAutoscaler, error) {
	return c.clientGetter.PodAutoscalers(obj.Namespace).Update(obj)
}

func (c *podAutoscalerController) UpdateStatus(obj *v1alpha1.PodAutoscaler) (*v1alpha1.PodAutoscaler, error) {
	return c.clientGetter.PodAutoscalers(obj.Namespace).UpdateStatus(obj)
}

func (c *podAutoscalerController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.PodAutoscalers(namespace).Delete(name, options)
}

func (c *podAutoscalerController) Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.PodAutoscaler, error) {
	return c.clientGetter.PodAutoscalers(namespace).Get(name, options)
}

func (c *podAutoscalerController) List(namespace string, opts metav1.ListOptions) (*v1alpha1.PodAutoscalerList, error) {
	return c.clientGetter.PodAutoscalers(namespace).List(opts)
}

func (c *podAutoscalerController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.PodAutoscalers(namespace).Watch(opts)
}

func (c *podAutoscalerController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.PodAutoscaler, err error) {
	return c.clientGetter.PodAutoscalers(namespace).Patch(name, pt, data, subresources...)
}

type podAutoscalerCache struct {
	lister  listers.PodAutoscalerLister
	indexer cache.Indexer
}

func (c *podAutoscalerCache) Get(namespace, name string) (*v1alpha1.PodAutoscaler, error) {
	return c.lister.PodAutoscalers(namespace).Get(name)
}

func (c *podAutoscalerCache) List(namespace string, selector labels.Selector) ([]*v1alpha1.PodAutoscaler, error) {
	return c.lister.PodAutoscalers(namespace).List(selector)
}

func (c *podAutoscalerCache) AddIndexer(indexName string, indexer PodAutoscalerIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1alpha1.PodAutoscaler))
		},
	}))
}

func (c *podAutoscalerCache) GetByIndex(indexName, key string) (result []*v1alpha1.PodAutoscaler, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1alpha1.PodAutoscaler))
	}
	return result, nil
}

type PodAutoscalerStatusHandler func(obj *v1alpha1.PodAutoscaler, status v1alpha1.PodAutoscalerStatus) (v1alpha1.PodAutoscalerStatus, error)

type PodAutoscalerGeneratingHandler func(obj *v1alpha1.PodAutoscaler, status v1alpha1.PodAutoscalerStatus) ([]runtime.Object, v1alpha1.PodAutoscalerStatus, error)

func RegisterPodAutoscalerStatusHandler(ctx context.Context, controller PodAutoscalerController, condition condition.Cond, name string, handler PodAutoscalerStatusHandler) {
	statusHandler := &podAutoscalerStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromPodAutoscalerHandlerToHandler(statusHandler.sync))
}

func RegisterPodAutoscalerGeneratingHandler(ctx context.Context, controller PodAutoscalerController, apply apply.Apply,
	condition condition.Cond, name string, handler PodAutoscalerGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &podAutoscalerGeneratingHandler{
		PodAutoscalerGeneratingHandler: handler,
		apply:                          apply,
		name:                           name,
		gvk:                            controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	RegisterPodAutoscalerStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type podAutoscalerStatusHandler struct {
	client    PodAutoscalerClient
	condition condition.Cond
	handler   PodAutoscalerStatusHandler
}

func (a *podAutoscalerStatusHandler) sync(key string, obj *v1alpha1.PodAutoscaler) (*v1alpha1.PodAutoscaler, error) {
	if obj == nil {
		return obj, nil
	}

	status := obj.Status
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *status.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(obj, "", nil)
		} else {
			a.condition.SetError(obj, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(status, newStatus) {
		var newErr error
		obj.Status = newStatus
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type podAutoscalerGeneratingHandler struct {
	PodAutoscalerGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *podAutoscalerGeneratingHandler) Handle(obj *v1alpha1.PodAutoscaler, status v1alpha1.PodAutoscalerStatus) (v1alpha1.PodAutoscalerStatus, error) {
	objs, newStatus, err := a.PodAutoscalerGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	apply := a.apply

	if !a.opts.DynamicLookup {
		apply = apply.WithStrictCaching()
	}

	if !a.opts.AllowCrossNamespace && !a.opts.AllowClusterScoped {
		apply = apply.WithSetOwnerReference(true, false).
			WithDefaultNamespace(obj.GetNamespace()).
			WithListerNamespace(obj.GetNamespace())
	}

	if !a.opts.AllowClusterScoped {
		apply = apply.WithRestrictClusterScoped()
	}

	return newStatus, apply.
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
