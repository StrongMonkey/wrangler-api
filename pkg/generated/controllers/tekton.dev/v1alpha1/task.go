/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	"github.com/rancher/wrangler/pkg/generic"
	v1alpha1 "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1"
	clientset "github.com/tektoncd/pipeline/pkg/client/clientset/versioned/typed/pipeline/v1alpha1"
	informers "github.com/tektoncd/pipeline/pkg/client/informers/externalversions/pipeline/v1alpha1"
	listers "github.com/tektoncd/pipeline/pkg/client/listers/pipeline/v1alpha1"
	"k8s.io/apimachinery/pkg/api/equality"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type TaskHandler func(string, *v1alpha1.Task) (*v1alpha1.Task, error)

type TaskController interface {
	generic.ControllerMeta
	TaskClient

	OnChange(ctx context.Context, name string, sync TaskHandler)
	OnRemove(ctx context.Context, name string, sync TaskHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() TaskCache
}

type TaskClient interface {
	Create(*v1alpha1.Task) (*v1alpha1.Task, error)
	Update(*v1alpha1.Task) (*v1alpha1.Task, error)

	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.Task, error)
	List(namespace string, opts metav1.ListOptions) (*v1alpha1.TaskList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Task, err error)
}

type TaskCache interface {
	Get(namespace, name string) (*v1alpha1.Task, error)
	List(namespace string, selector labels.Selector) ([]*v1alpha1.Task, error)

	AddIndexer(indexName string, indexer TaskIndexer)
	GetByIndex(indexName, key string) ([]*v1alpha1.Task, error)
}

type TaskIndexer func(obj *v1alpha1.Task) ([]string, error)

type taskController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.TasksGetter
	informer          informers.TaskInformer
	gvk               schema.GroupVersionKind
}

func NewTaskController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.TasksGetter, informer informers.TaskInformer) TaskController {
	return &taskController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromTaskHandlerToHandler(sync TaskHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1alpha1.Task
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1alpha1.Task))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *taskController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1alpha1.Task))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateTaskDeepCopyOnChange(client TaskClient, obj *v1alpha1.Task, handler func(obj *v1alpha1.Task) (*v1alpha1.Task, error)) (*v1alpha1.Task, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *taskController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *taskController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *taskController) OnChange(ctx context.Context, name string, sync TaskHandler) {
	c.AddGenericHandler(ctx, name, FromTaskHandlerToHandler(sync))
}

func (c *taskController) OnRemove(ctx context.Context, name string, sync TaskHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromTaskHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *taskController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), namespace, name)
}

func (c *taskController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), namespace, name, duration)
}

func (c *taskController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *taskController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *taskController) Cache() TaskCache {
	return &taskCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *taskController) Create(obj *v1alpha1.Task) (*v1alpha1.Task, error) {
	return c.clientGetter.Tasks(obj.Namespace).Create(obj)
}

func (c *taskController) Update(obj *v1alpha1.Task) (*v1alpha1.Task, error) {
	return c.clientGetter.Tasks(obj.Namespace).Update(obj)
}

func (c *taskController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.Tasks(namespace).Delete(name, options)
}

func (c *taskController) Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.Task, error) {
	return c.clientGetter.Tasks(namespace).Get(name, options)
}

func (c *taskController) List(namespace string, opts metav1.ListOptions) (*v1alpha1.TaskList, error) {
	return c.clientGetter.Tasks(namespace).List(opts)
}

func (c *taskController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.Tasks(namespace).Watch(opts)
}

func (c *taskController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Task, err error) {
	return c.clientGetter.Tasks(namespace).Patch(name, pt, data, subresources...)
}

type taskCache struct {
	lister  listers.TaskLister
	indexer cache.Indexer
}

func (c *taskCache) Get(namespace, name string) (*v1alpha1.Task, error) {
	return c.lister.Tasks(namespace).Get(name)
}

func (c *taskCache) List(namespace string, selector labels.Selector) ([]*v1alpha1.Task, error) {
	return c.lister.Tasks(namespace).List(selector)
}

func (c *taskCache) AddIndexer(indexName string, indexer TaskIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1alpha1.Task))
		},
	}))
}

func (c *taskCache) GetByIndex(indexName, key string) (result []*v1alpha1.Task, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1alpha1.Task))
	}
	return result, nil
}
