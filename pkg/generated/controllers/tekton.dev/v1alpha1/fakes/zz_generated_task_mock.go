// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1alpha1 "github.com/rancher/wrangler-api/pkg/generated/controllers/tekton.dev/v1alpha1"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1alpha1a "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockTaskControllerMockAddGenericHandler       sync.RWMutex
	lockTaskControllerMockAddGenericRemoveHandler sync.RWMutex
	lockTaskControllerMockCache                   sync.RWMutex
	lockTaskControllerMockCreate                  sync.RWMutex
	lockTaskControllerMockDelete                  sync.RWMutex
	lockTaskControllerMockEnqueue                 sync.RWMutex
	lockTaskControllerMockGet                     sync.RWMutex
	lockTaskControllerMockGroupVersionKind        sync.RWMutex
	lockTaskControllerMockInformer                sync.RWMutex
	lockTaskControllerMockList                    sync.RWMutex
	lockTaskControllerMockOnChange                sync.RWMutex
	lockTaskControllerMockOnRemove                sync.RWMutex
	lockTaskControllerMockPatch                   sync.RWMutex
	lockTaskControllerMockUpdate                  sync.RWMutex
	lockTaskControllerMockUpdater                 sync.RWMutex
	lockTaskControllerMockWatch                   sync.RWMutex
)

// Ensure, that TaskControllerMock does implement TaskController.
// If this is not the case, regenerate this file with moq.
var _ v1alpha1.TaskController = &TaskControllerMock{}

// TaskControllerMock is a mock implementation of TaskController.
//
//     func TestSomethingThatUsesTaskController(t *testing.T) {
//
//         // make and configure a mocked TaskController
//         mockedTaskController := &TaskControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1alpha1.TaskCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1alpha1a.Task) (*v1alpha1a.Task, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(namespace string, name string, options v1.GetOptions) (*v1alpha1a.Task, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(namespace string, opts v1.ListOptions) (*v1alpha1a.TaskList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1alpha1.TaskHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1alpha1.TaskHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.Task, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1alpha1a.Task) (*v1alpha1a.Task, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(namespace string, opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedTaskController in code that requires TaskController
//         // and then make assertions.
//
//     }
type TaskControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1alpha1.TaskCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1alpha1a.Task) (*v1alpha1a.Task, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1.GetOptions) (*v1alpha1a.Task, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1.ListOptions) (*v1alpha1a.TaskList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1alpha1.TaskHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1alpha1.TaskHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.Task, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1alpha1a.Task) (*v1alpha1a.Task, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.Task
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1alpha1.TaskHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1alpha1.TaskHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.Task
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *TaskControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("TaskControllerMock.AddGenericHandlerFunc: method is nil but TaskController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockTaskControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockTaskControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedTaskController.AddGenericHandlerCalls())
func (mock *TaskControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockTaskControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockTaskControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *TaskControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("TaskControllerMock.AddGenericRemoveHandlerFunc: method is nil but TaskController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockTaskControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockTaskControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedTaskController.AddGenericRemoveHandlerCalls())
func (mock *TaskControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockTaskControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockTaskControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *TaskControllerMock) Cache() v1alpha1.TaskCache {
	if mock.CacheFunc == nil {
		panic("TaskControllerMock.CacheFunc: method is nil but TaskController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockTaskControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockTaskControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedTaskController.CacheCalls())
func (mock *TaskControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockTaskControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockTaskControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *TaskControllerMock) Create(in1 *v1alpha1a.Task) (*v1alpha1a.Task, error) {
	if mock.CreateFunc == nil {
		panic("TaskControllerMock.CreateFunc: method is nil but TaskController.Create was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.Task
	}{
		In1: in1,
	}
	lockTaskControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockTaskControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedTaskController.CreateCalls())
func (mock *TaskControllerMock) CreateCalls() []struct {
	In1 *v1alpha1a.Task
} {
	var calls []struct {
		In1 *v1alpha1a.Task
	}
	lockTaskControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockTaskControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *TaskControllerMock) Delete(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("TaskControllerMock.DeleteFunc: method is nil but TaskController.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockTaskControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockTaskControllerMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedTaskController.DeleteCalls())
func (mock *TaskControllerMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockTaskControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockTaskControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *TaskControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("TaskControllerMock.EnqueueFunc: method is nil but TaskController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockTaskControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockTaskControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedTaskController.EnqueueCalls())
func (mock *TaskControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockTaskControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockTaskControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *TaskControllerMock) Get(namespace string, name string, options v1.GetOptions) (*v1alpha1a.Task, error) {
	if mock.GetFunc == nil {
		panic("TaskControllerMock.GetFunc: method is nil but TaskController.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockTaskControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockTaskControllerMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedTaskController.GetCalls())
func (mock *TaskControllerMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}
	lockTaskControllerMockGet.RLock()
	calls = mock.calls.Get
	lockTaskControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *TaskControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("TaskControllerMock.GroupVersionKindFunc: method is nil but TaskController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockTaskControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockTaskControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedTaskController.GroupVersionKindCalls())
func (mock *TaskControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockTaskControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockTaskControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *TaskControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("TaskControllerMock.InformerFunc: method is nil but TaskController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockTaskControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockTaskControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedTaskController.InformerCalls())
func (mock *TaskControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockTaskControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockTaskControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *TaskControllerMock) List(namespace string, opts v1.ListOptions) (*v1alpha1a.TaskList, error) {
	if mock.ListFunc == nil {
		panic("TaskControllerMock.ListFunc: method is nil but TaskController.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockTaskControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockTaskControllerMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedTaskController.ListCalls())
func (mock *TaskControllerMock) ListCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockTaskControllerMockList.RLock()
	calls = mock.calls.List
	lockTaskControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *TaskControllerMock) OnChange(ctx context.Context, name string, sync v1alpha1.TaskHandler) {
	if mock.OnChangeFunc == nil {
		panic("TaskControllerMock.OnChangeFunc: method is nil but TaskController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1alpha1.TaskHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockTaskControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockTaskControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedTaskController.OnChangeCalls())
func (mock *TaskControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1alpha1.TaskHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1alpha1.TaskHandler
	}
	lockTaskControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockTaskControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *TaskControllerMock) OnRemove(ctx context.Context, name string, sync v1alpha1.TaskHandler) {
	if mock.OnRemoveFunc == nil {
		panic("TaskControllerMock.OnRemoveFunc: method is nil but TaskController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1alpha1.TaskHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockTaskControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockTaskControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedTaskController.OnRemoveCalls())
func (mock *TaskControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1alpha1.TaskHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1alpha1.TaskHandler
	}
	lockTaskControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockTaskControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *TaskControllerMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.Task, error) {
	if mock.PatchFunc == nil {
		panic("TaskControllerMock.PatchFunc: method is nil but TaskController.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockTaskControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockTaskControllerMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedTaskController.PatchCalls())
func (mock *TaskControllerMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockTaskControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockTaskControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *TaskControllerMock) Update(in1 *v1alpha1a.Task) (*v1alpha1a.Task, error) {
	if mock.UpdateFunc == nil {
		panic("TaskControllerMock.UpdateFunc: method is nil but TaskController.Update was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.Task
	}{
		In1: in1,
	}
	lockTaskControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockTaskControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedTaskController.UpdateCalls())
func (mock *TaskControllerMock) UpdateCalls() []struct {
	In1 *v1alpha1a.Task
} {
	var calls []struct {
		In1 *v1alpha1a.Task
	}
	lockTaskControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockTaskControllerMockUpdate.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *TaskControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("TaskControllerMock.UpdaterFunc: method is nil but TaskController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockTaskControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockTaskControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedTaskController.UpdaterCalls())
func (mock *TaskControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockTaskControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockTaskControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *TaskControllerMock) Watch(namespace string, opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("TaskControllerMock.WatchFunc: method is nil but TaskController.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockTaskControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockTaskControllerMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedTaskController.WatchCalls())
func (mock *TaskControllerMock) WatchCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockTaskControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockTaskControllerMockWatch.RUnlock()
	return calls
}

var (
	lockTaskClientMockCreate sync.RWMutex
	lockTaskClientMockDelete sync.RWMutex
	lockTaskClientMockGet    sync.RWMutex
	lockTaskClientMockList   sync.RWMutex
	lockTaskClientMockPatch  sync.RWMutex
	lockTaskClientMockUpdate sync.RWMutex
	lockTaskClientMockWatch  sync.RWMutex
)

// Ensure, that TaskClientMock does implement TaskClient.
// If this is not the case, regenerate this file with moq.
var _ v1alpha1.TaskClient = &TaskClientMock{}

// TaskClientMock is a mock implementation of TaskClient.
//
//     func TestSomethingThatUsesTaskClient(t *testing.T) {
//
//         // make and configure a mocked TaskClient
//         mockedTaskClient := &TaskClientMock{
//             CreateFunc: func(in1 *v1alpha1a.Task) (*v1alpha1a.Task, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(namespace string, name string, options v1.GetOptions) (*v1alpha1a.Task, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, opts v1.ListOptions) (*v1alpha1a.TaskList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.Task, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1alpha1a.Task) (*v1alpha1a.Task, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(namespace string, opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedTaskClient in code that requires TaskClient
//         // and then make assertions.
//
//     }
type TaskClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1alpha1a.Task) (*v1alpha1a.Task, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1.GetOptions) (*v1alpha1a.Task, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1.ListOptions) (*v1alpha1a.TaskList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.Task, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1alpha1a.Task) (*v1alpha1a.Task, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.Task
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.Task
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *TaskClientMock) Create(in1 *v1alpha1a.Task) (*v1alpha1a.Task, error) {
	if mock.CreateFunc == nil {
		panic("TaskClientMock.CreateFunc: method is nil but TaskClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.Task
	}{
		In1: in1,
	}
	lockTaskClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockTaskClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedTaskClient.CreateCalls())
func (mock *TaskClientMock) CreateCalls() []struct {
	In1 *v1alpha1a.Task
} {
	var calls []struct {
		In1 *v1alpha1a.Task
	}
	lockTaskClientMockCreate.RLock()
	calls = mock.calls.Create
	lockTaskClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *TaskClientMock) Delete(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("TaskClientMock.DeleteFunc: method is nil but TaskClient.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockTaskClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockTaskClientMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedTaskClient.DeleteCalls())
func (mock *TaskClientMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockTaskClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockTaskClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *TaskClientMock) Get(namespace string, name string, options v1.GetOptions) (*v1alpha1a.Task, error) {
	if mock.GetFunc == nil {
		panic("TaskClientMock.GetFunc: method is nil but TaskClient.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockTaskClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockTaskClientMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedTaskClient.GetCalls())
func (mock *TaskClientMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}
	lockTaskClientMockGet.RLock()
	calls = mock.calls.Get
	lockTaskClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *TaskClientMock) List(namespace string, opts v1.ListOptions) (*v1alpha1a.TaskList, error) {
	if mock.ListFunc == nil {
		panic("TaskClientMock.ListFunc: method is nil but TaskClient.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockTaskClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockTaskClientMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedTaskClient.ListCalls())
func (mock *TaskClientMock) ListCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockTaskClientMockList.RLock()
	calls = mock.calls.List
	lockTaskClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *TaskClientMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.Task, error) {
	if mock.PatchFunc == nil {
		panic("TaskClientMock.PatchFunc: method is nil but TaskClient.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockTaskClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockTaskClientMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedTaskClient.PatchCalls())
func (mock *TaskClientMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockTaskClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockTaskClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *TaskClientMock) Update(in1 *v1alpha1a.Task) (*v1alpha1a.Task, error) {
	if mock.UpdateFunc == nil {
		panic("TaskClientMock.UpdateFunc: method is nil but TaskClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.Task
	}{
		In1: in1,
	}
	lockTaskClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockTaskClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedTaskClient.UpdateCalls())
func (mock *TaskClientMock) UpdateCalls() []struct {
	In1 *v1alpha1a.Task
} {
	var calls []struct {
		In1 *v1alpha1a.Task
	}
	lockTaskClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockTaskClientMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *TaskClientMock) Watch(namespace string, opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("TaskClientMock.WatchFunc: method is nil but TaskClient.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockTaskClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockTaskClientMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedTaskClient.WatchCalls())
func (mock *TaskClientMock) WatchCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockTaskClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockTaskClientMockWatch.RUnlock()
	return calls
}

var (
	lockTaskCacheMockAddIndexer sync.RWMutex
	lockTaskCacheMockGet        sync.RWMutex
	lockTaskCacheMockGetByIndex sync.RWMutex
	lockTaskCacheMockList       sync.RWMutex
)

// Ensure, that TaskCacheMock does implement TaskCache.
// If this is not the case, regenerate this file with moq.
var _ v1alpha1.TaskCache = &TaskCacheMock{}

// TaskCacheMock is a mock implementation of TaskCache.
//
//     func TestSomethingThatUsesTaskCache(t *testing.T) {
//
//         // make and configure a mocked TaskCache
//         mockedTaskCache := &TaskCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1alpha1.TaskIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(namespace string, name string) (*v1alpha1a.Task, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1alpha1a.Task, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1alpha1a.Task, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedTaskCache in code that requires TaskCache
//         // and then make assertions.
//
//     }
type TaskCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1alpha1.TaskIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1alpha1a.Task, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1alpha1a.Task, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1alpha1a.Task, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1alpha1.TaskIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *TaskCacheMock) AddIndexer(indexName string, indexer v1alpha1.TaskIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("TaskCacheMock.AddIndexerFunc: method is nil but TaskCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1alpha1.TaskIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockTaskCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockTaskCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedTaskCache.AddIndexerCalls())
func (mock *TaskCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1alpha1.TaskIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1alpha1.TaskIndexer
	}
	lockTaskCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockTaskCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *TaskCacheMock) Get(namespace string, name string) (*v1alpha1a.Task, error) {
	if mock.GetFunc == nil {
		panic("TaskCacheMock.GetFunc: method is nil but TaskCache.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockTaskCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockTaskCacheMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedTaskCache.GetCalls())
func (mock *TaskCacheMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockTaskCacheMockGet.RLock()
	calls = mock.calls.Get
	lockTaskCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *TaskCacheMock) GetByIndex(indexName string, key string) ([]*v1alpha1a.Task, error) {
	if mock.GetByIndexFunc == nil {
		panic("TaskCacheMock.GetByIndexFunc: method is nil but TaskCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockTaskCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockTaskCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedTaskCache.GetByIndexCalls())
func (mock *TaskCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockTaskCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockTaskCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *TaskCacheMock) List(namespace string, selector labels.Selector) ([]*v1alpha1a.Task, error) {
	if mock.ListFunc == nil {
		panic("TaskCacheMock.ListFunc: method is nil but TaskCache.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockTaskCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockTaskCacheMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedTaskCache.ListCalls())
func (mock *TaskCacheMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockTaskCacheMockList.RLock()
	calls = mock.calls.List
	lockTaskCacheMockList.RUnlock()
	return calls
}
